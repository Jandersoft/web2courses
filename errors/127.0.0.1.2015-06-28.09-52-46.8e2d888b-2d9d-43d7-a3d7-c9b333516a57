(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> int() argument must be a string or a number, not 'NoneType'"
p3
sS'layer'
p4
S'/home/julia/web2py/applications/courses_app/controllers/manage.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n##################################################################################\n####                                                                          ####\n####                              TEACHER PAGES                               ####\n####                                                                          ####\n##################################################################################\n\n@auth.requires_login()\ndef courses():\n    courses = db(Course).select()\n    return dict(courses=courses)\n\n@auth.requires_login()\ndef classes():\n    if request.vars.course:\n        course_id = int(request.vars.course)\n        classes = db(Class.course == course_id).select(orderby=~Class.start_date)\n    else:\n        classes = db(Class).select(orderby=Class.course|~Class.start_date)\n    return dict(classes=classes)\n\n@auth.requires_login()\ndef lessons():\n    import itertools\n\n    try:\n        class_id = int(request.args(0))\n    except:\n        redirect(URL(\'default\', \'index\'))\n\n    modules = db(Module.class_id == class_id).select()\n\n    all_lessons = {}\n    for module in modules:\n        for lesson in module.lessons.select():\n            videos = lesson.videos.select()\n            texts = lesson.texts.select()\n            exercises = lesson.exercises.select()\n            merged_records = itertools.chain(videos, texts, exercises)\n            contents = sorted(merged_records, key=lambda record: record[\'place\'])\n            all_lessons["m%d_l%d" % (module.id, lesson.id)] = contents\n\n    return dict(modules=modules,\n                all_lessons=all_lessons)\n\n@auth.requires_login()\ndef pick_type():\n    form = SQLFORM.factory(\n        Field(\'type\', requires=IS_IN_SET({4: T(\'Video\'), 5: T(\'Text\'), 6: T(\'Question\')}))\n        )\n    if form.process().accepted:\n        redirect(URL(\'new\', args=int(form.vars.type), vars=request.vars))\n    elif form.errors:\n        response.flash(T(\'Form has errors!\'))\n    return dict(form=form)\n\n##################################################################################\n####                                                                          ####\n####                   CRUD PAGES FOR COURSES, CLASSES, ETC                   ####\n####                                                                          ####\n##################################################################################\n\n@auth.requires_login()\ndef new():\n    tables = [Course, Class, Module, Lesson, Video, Text, Exercise]\n    table_type = int(request.args(0))\n\n    if table_type == 2:\n        Module.class_id.default = int(request.args(1))\n        Module.place.default = db(Module.class_id == int(request.args(1))).count()\n        Module.class_id.writable = Module.class_id.readable = False\n        Module.place.writable = Module.place.readable = False\n    elif table_type == 3:\n        Lesson.lesson_module.default = int(request.args(1))\n        Lesson.place.default = db(Lesson.lesson_module == int(request.args(1))).count()\n        Lesson.lesson_module.writable = Lesson.lesson_module.readable = False\n        Lesson.place.writable = Lesson.place.readable = False\n\n    form = crud.create(tables[table_type], next=request.vars.next)\n    return dict(form=form)\n\n@auth.requires_login()\ndef edit():\n    tables = [Course, Class, Module, Lesson, Video, Text, Exercise]\n    table_type = int(request.args(0))\n    record_id = int(request.args(1))\n\n    if table_type == 2:\n        Module.class_id.default = int(request.args(2))\n        Module.place.default = db(Module.class_id == int(request.args(2))).count()\n        Module.class_id.writable = Module.class_id.readable = False\n        Module.place.writable = Module.place.readable = False\n    elif table_type == 3:\n        Lesson.lesson_module.default = int(request.args(2))\n        Lesson.place.default = db(Lesson.lesson_module == int(request.args(2))).count()\n        Lesson.lesson_module.writable = Lesson.lesson_module.readable = False\n        Lesson.place.writable = Lesson.place.readable = False\n\n    form = crud.update(tables[table_type], record_id, next=request.vars.next)\n    return dict(form=form)\n\n@auth.requires_login()\ndef delete():\n    tables = [Course, Class, Module, Lesson, Video, Text, Exercise]\n    table_type = int(request.args(0))\n    record_id = int(request.args(1))\n\n    crud.delete(tables[table_type], record_id, next=request.vars.next)\n\n\nresponse._vars=response._caller(edit)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/julia/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/julia/web2py/applications/courses_app/controllers/manage.py", line 112, in <module>\n  File "/home/julia/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/julia/web2py/gluon/tools.py", line 3440, in f\n    return action(*a, **b)\n  File "/home/julia/web2py/applications/courses_app/controllers/manage.py", line 95, in edit\n    Lesson.lesson_module.default = int(request.args(2))\nTypeError: int() argument must be a string or a number, not \'NoneType\'\n'
p11
s.