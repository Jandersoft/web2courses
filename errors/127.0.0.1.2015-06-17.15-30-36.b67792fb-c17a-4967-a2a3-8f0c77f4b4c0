(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> decorator() takes exactly 1 argument (0 given)"
p3
sS'layer'
p4
S'/home/julia/web2py/applications/courses_app/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n##################################################################################\n####                                                                          ####\n####                               COURSE PAGES                               ####\n####                                                                          ####\n##################################################################################\n\ndef courses():\n    courses = db(Course).select()\n    return dict(courses=courses)\n\ndef course():\n    course_id = int(request.args(0))\n    course = db(Course.id == course_id).select().first()\n    open_classes = course.classes(Class.status == 3).select()\n    \n    Interest.course.default = course_id\n    Interest.course.readable = Interest.course.writable = False\n    interest_form = SQLFORM(Interest)\n    if interest_form.process(onvalidation=check_if_exists).accepted:\n        response.flash = T("Thank you!")\n    elif interest_form.errors:\n        response.flash = T("Erros no formul\xc3\xa1rio!")\n        \n    return dict(\n        course=course,\n        open_classes=open_classes,\n        interest_form=interest_form)\n\n@auth.requires_login()\ndef enroll():\n    class_id = int(request.args(0))\n    if not class_id:\n        session.flash = T("No class selected!")\n        redirect(URL(\'courses\'))\n        \n    Student.insert(student=auth.user.id, class_id=class_id, status=1)\n    session.flash = T("Congrats! You\'re enrolled on a new course!") \n    redirect(URL(\'my_courses\'))\n\n@auth.requires_login()\ndef my_courses():\n    class_ids = db(Student.student == auth.user.id).select(Student.class_id)\n    classes = db(Class.id.belongs([x.class_id for x in class_ids])).select()\n    return dict(classes=classes)\n\n@auth.requires_login()\ndef my_class():\n    try:\n        class_id = int(request.args(0))\n    except:\n        redirect(URL(\'index\'))\n    my_class = db(Class.id == class_id).select().first()\n    modules = db(Module.class_id == class_id).select()\n    return dict(my_class=my_class, \n                modules=modules)\n\n@auth.requires_login()\ndef module():\n    try:\n        mod_id = int(request.args(0))\n    except:\n        redirect(URL(\'index\'))\n    module = db(Module.id == mod_id).select().first()\n    lessons = db(Lesson.lesson_module == module.id).select(orderby=Lesson.place)\n    return dict(module=module,\n                lessons=lessons)\n\n@auth.requires_login\ndef lesson():\n    try:\n        lesson_id = int(request.args(0))\n    except:\n        redirect(URL(\'index\'))\n    lesson = db(Lesson.id == lesson_id).select().first()\n    videos = lesson.videos.select()\n    texts = lesson.texts.select()\n    exercises = lesson.exercises.select()\n\n    merged_records = itertools.chain(videos, texts, exercises)\n    contents = sorted(merged_records, key=lambda record: record[\'place\'])\n    return dict(lesson=lesson,\n                contents=contents)\nresponse._vars=response._caller(lesson)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/julia/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/julia/web2py/applications/courses_app/controllers/default.py", line 141, in <module>\n  File "/home/julia/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\nTypeError: decorator() takes exactly 1 argument (0 given)\n'
p11
s.